get post put delete

if request.method == 'GET':
    do_something()
elif request.method == 'POST':
    do_something_else()

REST(Representational State Transfer)

GET method - to fetch from the server
PUT method - updating an existing resource
DELETE method - remove a resource from the server

request.GET and request.POST

The attributes return a dictionary-like object containing GET and POST parameters, respectively.

request.COOKIES

Along with the parameters, the browser also packs the request objects with cookies
inserted by the server's previous interactions.
It is a dictionary of string keys and values.

request.FILES

When the user uploads one or more files with a multipart form,
they are present in this attribute in the form of UploadedFile objects.
By appropriate logic in the view, these uploaded files are saved in the
designated folder on the server.

request.user

The request object also contains information about the current user.
This attribute is an object of django.contrib.auth.models.User class.
However, if the user is unauthenticated, it returns AnonymousUser.

request.has_key()



###### app urls.py
from django.shortcuts import render
from django.urls import path
from . import views

# create views here
urlpatterns = [
    path('home/', views.home, name='home'),
    path('index/', views.index, name='index'),
    path('request_headers_keys/', views.request_headers_keys, name='request_headers_keys'),
    path('request_headers_values/', views.request_headers_values, name='request_headers_values'),
    path('request_headers_dict/', views.request_headers_dict, name='request_headers_dict'),
    path('req_parts/', views.req_parts, name='req_parts'),
    path('req_msg/', views.req_msg, name='req_msg'),
    path('req_msg_http/', views.req_msg_http, name='req_msg_http'),
]

###### app view.py
from django.shortcuts import render
from django.http import HttpResponse

# Create your views here.
def home(request):
    path = request.path
    # return HttpResponse("<ht>This is the home page.</h1>")
    return HttpResponse(path, content_type='text/html', charset='utf-8')

def index(request):
    return HttpResponse("Index")

def request_headers_keys(request):
    text = ""
    for k in request.headers.keys():
        text += f"{k}\n"
    return HttpResponse(text, content_type='text', charset='utf-8')
    # return HttpResponse(request.keys(), content_type='text/html', charset='utf-8')

def request_headers_values(request):
    text = ""
    for v in request.headers.values():
        text += f"{v}\n"
    return HttpResponse(text, content_type='text', charset='utf-8')
    # return HttpResponse(request.values(), content_type='text/html', charset='utf-8')

def request_headers_dict(request):
    """ http://127.0.0.1:8000/request_headers_dict/ """
    text = ""
    for k,v in request.headers.items():
        text += f"{k} : {v}\n"
    return HttpResponse(text, content_type='text', charset='utf-8')

def req_parts(request):
    text = ""
    path = request.path
    scheme = request.scheme
    method = request.method
    address = request.META['REMOTE_ADDR']
    user_agent = request.META['HTTP_USER_AGENT']
    path_info = request.path_info

    text += f'{path = }\n'
    text += f'{scheme = }\n'
    text += f'{method = }\n'
    text += f'{address = }\n'
    text += f'{user_agent = }\n'
    text += f'{path_info = }\n'

    response = HttpResponse("This works!")

    return HttpResponse(text, content_type='text', charset='utf-8')

def req_msg(request):
    path = request.path
    scheme = request.scheme
    method = request.method
    address = request.META['REMOTE_ADDR']
    user_agent = request.META['HTTP_USER_AGENT']
    path_info = request.path_info

    # msg = f"""
    # <br>{path = }
    # <br>{scheme = }
    # <br>{method = }
    # <br>{address = }
    # <br>{user_agent = }
    # <br>{path_info = }
    # """
    # return HttpResponse(msg, content_type='text', charset='utf-8')

    msg = f"""<br>
        <br>Path: {path}
        <br>Scheme: {scheme}
        <br>Method: {method}
        <br>Address: {address}
        <br>User agent: {user_agent}
        <br>Path info: {path_info}
    """
    return HttpResponse(msg, content_type='text/html', charset='utf-8')


def req_msg_http(request):
    path = request.path
    scheme = request.scheme
    method = request.method
    address = request.META['REMOTE_ADDR']
    user_agent = request.META['HTTP_USER_AGENT']
    path_info = request.path_info

    # msg = f"""
    # <br>{path = }
    # <br>{scheme = }
    # <br>{method = }
    # <br>{address = }
    # <br>{user_agent = }
    # <br>{path_info = }
    # """
    # return HttpResponse(msg, content_type='text', charset='utf-8')

    # response object - good for forms, databases, etc.
    response = HttpResponse()
    response.headers['Age'] = 20
    msg = f"""<br>
        <br>Path: {path}
        <br>Scheme: {scheme}
        <br>Method: {method}
        <br>Address: {address}
        <br>User agent: {user_agent}
        <br>Path info: {path_info}<br>
        <br>Response header: {response.headers}
    """
    return HttpResponse(msg, content_type='text/html', charset='utf-8')

##### project urls.py
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path("admin/", admin.site.urls),
    # path('main/', include('simpleapp.urls')),
    path('', include('simpleapp.urls')),
]

"""
view results
http://127.0.0.1:8000/request_headers_dict/
...
http://127.0.0.1:8000/req_parts/
...
http://127.0.0.1:8000/req_msg_http/
"""

##### project settings.py


URL
scheme
    protocol
subdomain
    www etc
domain
    second-level domain
        company name (littlelemon)
    top-level domain
        country / category of organization
        .com edu org .de, .ie, etc.
file path
    location of resource
        local (users server) localhost:8000
        web-based (external server) https://www.littlelemon.com/menu
parameter
    query strings
        ?year=2022
    parameter
        /2022/

https://www.littlelemon.com/menu/2022

scheme: https
subdomain: www
domain: littlelemon.com
file path: menu
parameter: 2022


http://localhost:8000/getuser/John/1

urls.py
path('getuser/<name>/<id>', views.pathview, name='pathview'),

view.py
from django.http import HttpResponse
def pathview(request, name, id):
    return HttpResponse("Name:{} UserID:{}".format(name, id))

parameters in url must match arguments

<..> path parameters

str - Matches any non-empty string and excludes the path separator, '/'. This is the default if a converter isn’t included in the expression.
int - Matches zero or any positive integer and returns an int. For example:/customer/<int:id>
slug - Matches any slug string consisting of ASCII letters or numbers, including the hyphen and underscore characters.
uuid - Matches a formatted UUID.  For example: 075194d3-6885-417e-a8a8-6c931e272f00 and returns a UUID instance.
path - Matches any non-empty string and includes the path separator, '/'.


query string linked to endpoint
http://localhost:8000/getuser/?name=John&id=1
key=value pairs concatted with the & symbol

query string ends with the ? symbol after the URL endpoint

to get these parameters, refer to the query string as the key of the dict
request.GET[‘name’]



HTML sends data to URL with POST method
    **more secure than GET as data not revealed in the URL**

{% csrf_token %} tag is necessary to prevent cross-site forgery attacks


path('index_db/<int:id>', views.index_db, name='index_db'),
could use this to access the primary key of the database



application namespace
from django.urls import path
from . import views
# define it
app_name='demoapp'
urlpatterns = [
    path('', views.index, name='index'),
]



client error responses
400 bad request
401 unauthorized
403 forbidden
404 not found

server error responses
500 internal server error


views.py
handler400
handler403
handler404
handler500


# default
from django.http import HttpResponse, HttpResponseNotFound
def my_view(request):
    # ...
    if condition==True:
        return HttpResponseNotFound('<h1>Page not found</h1>')
    else:
        return HttpResponse('<h1>Page was found</h1>')

# with status code
from django.http import HttpResponse
def my_view(request):
    # ...
    if condition==True:
        return HttpResponse('<h1>Page not found</h1>', status_code='404')
    else:
        return HttpResponse('<h1>Page was found</h1>')


# object model
from django.http import Http404, HttpResponse
from .models import Product

def detail(request, id):
    try:
        p = Product.objects.get(pk=id)
    except Product.DoesNotExist:
        raise Http404("Product does not exist")
    return HttpResponse("Product Found")


HttpResponseBadRequest, HttpResponseForbidden ...



create custom error page
create a 404.html page and put it in project/templates folder


django's server is in DEBUG mode by default which shows error traceback
settings.py
** set DEBUG=False ** for seeing custom exception messages you create



Exception classes
Django’s exception classes are defined in the django.core.exceptions module.
ObjectDoesNotExist: All the exceptions of the DoesNotExist are inherited from this base exception.
EmptyResultSet: query does not return any result
FieldDoesNotExist: requested field does not exist.

try:
    field = model._meta.get_field(field_name)
except FieldDoesNotExist:
    return HttpResponse("Field Does not exist")
MultipleObjectsReturned:

When you expect a certain query to return only a single object,
however multiple objects are returned. This is when you need to raise this exception.

PermissionDenied: This exception is raised when a user does not
have permission to perform the action requested.

def myview(request):
    if not request.user.has_perm('myapp.view_mymodel'):
        raise PermissionDenied()
    return HttpResponse()
ViewDoesNotExist: This exception is raised by django.urls when a requested view
does not exist, possibly because of incorrect mapping defined in the URLconf.

When a certain view is called with a POST or PUT request, the request body is populated by the form data.

Django’s Form API defines various fields specific to the type of data stored.
For example, you have EmailField, FileField, IntegerField, MultipleChoiceField.

These fields have built-in validators. The is_valid() method returns True if the validations are passed.
You can raise an exception if it returns False.

MultipleObjectsReturned - when expecting single
PermissionDenied - user lacks permissions

ViewDoesNotExist - could be due to incorrect mapping in URLConf

built-in validators for these fields:
EmailField, FileField, IntegerField, MultipleChoiceField

is_valid() method returns True if the validations are passed. You can raise an exception if it returns False.

def myview(request):
    if request.method == "POST":
        form = MyForm(request.POST)
        if form.is_valid():
            #process the form data
        else:
            return HttpResponse("Form submitted with invalid data")


inspectelement -> network -> click name and look at headers, refresh page

best to have error pages that direct user back to homepage


class based views let you use views as objects

CRUD ops for webpage
    GET POST PUT DELETE


mixins
on model instances ...
create, list, retrieve, update, delete